trigger: none

stages:

# Stage 1 - BUILD
- stage: Build
  condition: false
  jobs:
  - job: BuildJob
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: true
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    - script: python3 base-app/helloworld.py
    displayName: 'Run Hello World'

# Stage 2 - INSTALL TOOLS
- stage: InstallTools
  condition: true
  jobs:
  - job: InstallToolsJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        python3 -m ensurepip --upgrade
        python3 -m pip install --upgrade pip setuptools wheel
      displayName: 'Installation of the tools'

# Stage 3 - CHECK INSTALL TOOLS AND VERSIONS
- stage: CheckInstallTools
  condition: true
  jobs:
  - job: CheckInstallToolsJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        python3 --version
        pip --version
      displayName: 'Check Python and pip versions'

# Stage 4 - UNIT TEST
- stage: UnitTest
  condition: true
  jobs:
  - job: UnitTestJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # CHECK - Pyton and pip versions
    - script: |
        python3 --version
        pip --version
      displayName: 'Check Python and pip versions'
    # CHECK - Working directory
    - script: |
        pwd
        ls -R
      displayName: 'Check working directory'
    # INSTALL - Pytest and Coverage to Test
    - script: |
        pip install pytest pytest-azurepipelines pytest-cov
        pip list
        python3 -m pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml -v test-app/test_main.py
        echo "Contenido del directorio actual:"
        ls -R
        echo "Contenido de la carpeta junit (si existe):"
        ls -R junit || echo "La carpeta junit no existe"
        echo "Buscando archivos XML de resultados:"
        find . -name "*.xml"
      displayName: 'Unit Test with pytest and debug output'

# Stage 5 - PUBLISH TEST RESULTS
- stage: PublishTestResults
  condition: true
  jobs:
  - job: CheckInstallToolsJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testRunTitle: 'Publish test results for Python $(pythonVersion)'
      displayName: 'Publish Unit Test Results'

    - task: PublishCodeCoverageResults@2
      condition: succeededOrFailed()
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        failIfCoverageEmpty: false
      displayName: 'Publish Code Coverage Results'
    
    - script: |
        if [ -f coverage.xml ]; then
          python3 -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          total = root.find('.//coverage')
          print(f'Cobertura total: {float(total.attrib['line-rate']) * 100:.2f}%')
          for class_elem in root.findall('.//class'):
              print(f'Archivo: {class_elem.attrib['filename']}, Cobertura: {float(class_elem.attrib['line-rate']) * 100:.2f}%')
          "
        else
          echo "El archivo coverage.xml no se encontr√≥"
        fi
      displayName: 'Print Coverage Summary'
      condition: succeededOrFailed()

# Stage 6 - STATIC CODE ANALYSIS
- stage: StaticCodeAnalysis
  condition: true
  jobs:
  - job: StaticCodeAnalysisJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        python3 -m pip install flake8
        flake8 .
      displayName: 'Run lint test'
    - script: |
        python3 -m pytest --junitxml=./test-results.xml
      displayName: 'Run PyTest Tester'
    
    # PUBLISH - Lint Test
    - task: PublishTestResults@2
      displayName: 'Publish PyTest results'
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(pythonVersion)'